using Kingmaker.Blueprints;
using Kingmaker.Blueprints.Classes.Prerequisites;
using Kingmaker.Blueprints.Classes.Selection;
using Kingmaker.Utility;
using TabletopTweaks.Core.Utilities;
using static Kingmaker.Blueprints.Classes.Prerequisites.Prerequisite;
using static TabletopTweaks.Base.Main;

namespace TabletopTweaks.Base.NewContent.Feats {
    static class ExtraArcanistExploit {
        public static void AddExtraArcanistExploit() {
            var ArcanistExploitSelection = BlueprintTools.GetBlueprint<BlueprintFeatureSelection>("b8bf3d5023f2d8c428fdf6438cecaea7");
            var ExploiterExploitSelection = BlueprintTools.GetBlueprint<BlueprintFeatureSelection>("2ba8a0040e0149e9ae9bfcb01a8ff01d");
            var ExtraArcanistExploitSelection = BlueprintTools.GetBlueprint<BlueprintFeatureSelection>("0a7065e13f4449fa81bfb33199bf7f6a");

            var ExtraArcanistExploit = FeatTools.CreateExtraSelectionFeat(TTTContext, "ExtraArcanistExploit", ArcanistExploitSelection, bp => {
                bp.SetName(TTTContext, "Extra Arcanist Exploit");
                bp.SetDescription(TTTContext, "You gain one additional arcanist exploit. You must meet the prerequisites for this arcanist exploit." +
                    "\nYou can take this feat multiple times. Each time you do, you gain another arcanist exploit.");
                bp.AddPrerequisiteFeature(ExploiterExploitSelection, GroupType.Any);
                bp.GetComponents<PrerequisiteFeature>().ForEach(p => p.Group = GroupType.Any);
            });
            if (TTTContext.AddedContent.Feats.IsDisabled("ExtraArcanistExploit")) { return; }
            FeatTools.AddAsFeat(ExtraArcanistExploit);
            FeatTools.RemoveAsFeat(ExtraArcanistExploitSelection);
        }
    }
}
